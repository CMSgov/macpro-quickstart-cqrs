service: debug

frameworkVersion: "2"

plugins:
  - serverless-plugin-scripts
  - serverless-stack-termination-protection

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - production
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id~true, ssm:/configuration/default/vpc/id~true}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id~true, ssm:/configuration/default/vpc/subnets/private/a/id~true}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id~true, ssm:/configuration/default/vpc/subnets/private/b/id~true}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id~true, ssm:/configuration/default/vpc/subnets/private/c/id~true}
  kafkaSecurityGroupId: ${cf:kafka-cluster-${self:custom.stage}.MskSecurityGroupId}
  kafkaLogsSecurityGroupId: ${cf:kafka-event-logs-${self:custom.stage}.KafkaConnectWorkerSecurityGroupId}
  legacyMssqlKafkaConnectSecurityGroupId: ${cf:legacydb-connect-${self:custom.stage}.KafkaConnectWorkerSecurityGroupId}
  mskSsmPathPrefix: /kafka-cluster-${self:custom.stage}
  scripts:
    commands:
      connect: |
        instanceId=${cf:debug-${self:custom.stage}.Ec2Id, ""}
        if [ -z "$instanceId" ]; then
          echo "No debug instance found for stage ${self:custom.stage}" && exit 1
        else
          echo """
        To connect to the debug instance, run the following command:

        aws ssm start-session --target $instanceId
          """
        fi

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
  Parameters:
    pLatestAmiId:
      Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
      Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  Resources:
    Ec2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - Ref: AWS::NoValue
        ManagedPolicyArns:
          - !Sub arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        Policies:
          - PolicyName: Ec2RolePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:PutParameter
                    - ssm:GetParameter
                  Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${self:custom.mskSsmPathPrefix}/*
    Ec2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: ${self:custom.iamPath}
        Roles:
          - !Ref Ec2InstanceRole
    Ec2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for the debug instance.
        VpcId: ${self:custom.vpcId}
    Ec2:
      Type: AWS::EC2::Instance
      Properties:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              VolumeSize: 10
              DeleteOnTermination: "false"
              Encrypted: "true"
        HibernationOptions:
          Configured: true
        IamInstanceProfile: !Ref Ec2InstanceProfile
        ImageId: !Ref pLatestAmiId
        InstanceType: t3.micro
        SecurityGroupIds:
          - !Ref Ec2SecurityGroup
        SubnetId: ${self:custom.privateSubnets.0}
        UserData:
          Fn::Base64: |
            #!/bin/bash
            # Log userdata execution to /var/log/user-data.log
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            cd ~
            yum install -y java-1.8.0-openjdk
            curl -O https://archive.apache.org/dist/kafka/2.2.0/kafka_2.12-2.2.0.tgz
            tar -xzvf kafka_2.12-2.2.0.tgz
            ln -s kafka_2.12-2.2.0 kafka
            echo """
            aws configure set default.region ${self:custom.region}
            export BROKERSTRING=\`aws ssm get-parameter --name ${self:custom.mskSsmPathPrefix}/bootstrapBrokerStringTls --output text --query Parameter.Value\`
            export ZKSTRING=\`aws ssm get-parameter --name ${self:custom.mskSsmPathPrefix}/zookeeperConnectString --output text --query Parameter.Value\`
            cd ~/kafka
            """ >> ~/.bashrc
            echo 'security.protocol = SSL' > kafka/ssl.properties
            echo "~/kafka/bin/kafka-topics.sh --list --zookeeper \$ZKSTRING" > kafka/list-topics.sh
            echo "~/kafka/bin/kafka-console-consumer.sh --bootstrap-server \$BROKERSTRING --consumer.config ssl.properties --topic \$1 --from-beginning" > kafka/read-topic.sh
    DebugEc2SecurityGroupIngressBrokers:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: ${self:custom.kafkaSecurityGroupId}
        IpProtocol: tcp
        FromPort: 9094
        ToPort: 9094
        SourceSecurityGroupId: !Sub "${Ec2SecurityGroup}"
    DebugEc2SecurityGroupIngressBrokersZookeeper:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: ${self:custom.kafkaSecurityGroupId}
        IpProtocol: tcp
        FromPort: 2181
        ToPort: 2181
        SourceSecurityGroupId: !Sub "${Ec2SecurityGroup}"
    DebugEc2SecurityGroupIngressKafkaLogsCluster:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: ${self:custom.kafkaLogsSecurityGroupId}
        IpProtocol: tcp
        FromPort: 8083
        ToPort: 8083
        SourceSecurityGroupId: !Sub "${Ec2SecurityGroup}"
    DebugEc2SecurityGroupIngressLegacyMssqlCluster:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: ${self:custom.legacyMssqlKafkaConnectSecurityGroupId}
        IpProtocol: tcp
        FromPort: 8083
        ToPort: 8083
        SourceSecurityGroupId: !Sub "${Ec2SecurityGroup}"
  Outputs:
    Ec2Id:
      Description: The Id of the EC2 debug instance
      Value: !Ref Ec2
