
service: bigmac-mgmt

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-scripts
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev

custom:
  stage: ${opt:stage, self:provider.stage}
  clusterArn: ${ssm:/bigmac-${self:custom.stage}/clusterArn}
  bootstrapBrokerStringTls: ${ssm:/bigmac-${self:custom.stage}/bootstrapBrokerStringTls}
  zookeeperConnectString: ${ssm:/bigmac-${self:custom.stage}/zookeeperConnectString}
  vpcId: ${env:VPC_ID}
  subnets:
    - ${env:PRIVATE_SUBNET_ID_1}
    - ${env:PRIVATE_SUBNET_ID_2}
    - ${env:PRIVATE_SUBNET_ID_3}
  scripts:
    hooks:
      deploy:finalize: |
        serverless invoke --stage ${self:custom.stage} --function createTopicAmendments
  iamPath: ${env:IAM_PATH, "/"}

functions:
  createTopicAmendments:
    handler: handlers/createTopic.handler
    maximumRetryAttempts: 2
    role: LambdaBigMacMgmtRole
    environment:
      clusterArn: ${self:custom.clusterArn}
      bootstrapBrokerStringTls: ${self:custom.bootstrapBrokerStringTls}
      zookeeperConnectString: ${self:custom.zookeeperConnectString}
    vpc:
      securityGroupIds:
        - Ref: LambdaBigMacMgmtSecurityGroup
      subnetIds: ${self:custom.subnets}

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
          - ""
          - ${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  Resources:
    LambdaBigMacMgmtSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for the Lambda that manages MSK
        VpcId: ${self:custom.vpcId}

    LambdaBigMacMgmtRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - Fn::Join:
              - ''
              -
                - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ':policy'
                - '${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}'
            - Ref: AWS::NoValue
        Policies:
          - PolicyName: 'LambdaRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: 'Allow'
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                - kafka:*
                Resource: '*'
              - Effect: 'Allow'
                Action:
                - "ec2:CreateNetworkInterface"
                - "ec2:DescribeNetworkInterfaces"
                - "ec2:DetachNetworkInterface"
                - "ec2:DeleteNetworkInterface"
                Resource: "*"
